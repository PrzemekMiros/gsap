@media(min-width:767px) {
  html {
    overflow-y: hidden
  }
}
body {
    margin: 0;
    height: 100%;
    width: 100%;
    font-family: "Syne", sans-serif;
    font-weight: 800;
    background: var(--color-light-1);
    color: var(--color-dark-1);
    overflow-x: hidden;
    overflow-y: scroll;
}

a {
  color: var(--color-dark-1);
  text-decoration: none
}

p {
  font-family: "Montserrat", sans-serif;
  font-size: 5vw;
  font-weight: 400;
}

img {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}



.spacing-200 {
    height: 200px;
    display: block
}


.site-grid {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
}

.site-grid-item {
  height: 100vh;
  border-right: 1px solid rgba(130, 130, 130, 0.25);
}


.progress-wrap {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 12px
}

progress {
  position: fixed;
  top: 0;
  left: 0;
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 15px;
  border: none;
  background: transparent
}
progress::-webkit-progress-bar {
  background: transparent
}
progress::-webkit-progress-value {
  background: var(--color-dark-1)
}
progress::-moz-progress-bar {
  background: var(--color-dark-1)
}


:root {
  --line-index: 10;
  --line-total: 10;
}

/* Styles for Splitting */

.splitting {
  margin: 0;
  font-size: 14vw;
  font-weight: 800;
  line-height: .9
}

.splitting .word {
  margin-bottom: -0.55em
}

.splitting .word,
.splitting .char {
  display: inline-block;
  overflow: hidden
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */

.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);

  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);

  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));

  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));

  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));

  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );

  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));

  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}

.splitting.cells img { width: 100%; display: block; }

@supports ( display: grid ) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }

  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0; 
    left: 0; 
    width: 100%; 
    height: 100%;
    display: grid;
    grid-template: repeat( var(--row-total), 1fr ) / repeat( var(--col-total), 1fr );
  }

  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }

  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    /* Size to fit the whole container size */
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }

  /* Helper variables for advanced effects */
  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);

    /* Offset from center, positive & negative */
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));

    /* Absolute distance from center, only positive */
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );

    /* Absolute distance from center, only positive */
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}



.site-link {
  position:relative
 }
 .site-link:before {
  content:"";
  width:0;
  height:3px;
  background:var(--color-dark-1);
  transition:all .5s ease-in-out;
  position:absolute;
  bottom:-5px;
  left:0
 }
 .site-link:hover:before {
  width:100%
 }
 .arrow {
  width:75px;
  height:auto;
  fill:var(--color-dark-1)
 }