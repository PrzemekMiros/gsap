</div>
     
<script src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/gsap-latest-beta.min.js?r=5426"></script>
<script src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/ScrollTrigger.min.js?v=3.4.0.1"></script>
<script src="https://cdn.jsdelivr.net/npm/locomotive-scroll@3.5.4/dist/locomotive-scroll.min.js"></script>

<script>
    // Using Locomotive Scroll from Locomotive https://github.com/locomotivemtl/locomotive-scroll
  
  const locoScroll = new LocomotiveScroll({
    el: document.querySelector(".smooth-scroll"),
    smooth: true,
    multiplier: 0.75
  });
  // each time Locomotive Scroll updates, tell ScrollTrigger to update too (sync positioning)
  locoScroll.on("scroll", ScrollTrigger.update);
  
  // tell ScrollTrigger to use these proxy methods for the ".smooth-scroll" element since Locomotive Scroll is hijacking things
  ScrollTrigger.scrollerProxy(".smooth-scroll", {
    scrollTop(value) {
      return arguments.length ? locoScroll.scrollTo(value, 0, 0) : locoScroll.scroll.instance.scroll.y;
    }, // we don't have to define a scrollLeft because we're only scrolling vertically.
    getBoundingClientRect() {
      return {top: 0, left: 0, width: window.innerWidth, height: window.innerHeight};
    },
    // LocomotiveScroll handles things completely differently on mobile devices - it doesn't even transform the container at all! So to get the correct behavior and avoid jitters, we should pin things with position: fixed on mobile. We sense it by checking to see if there's a transform applied to the container (the LocomotiveScroll-controlled element).
    pinType: document.querySelector(".smooth-scroll").style.transform ? "transform" : "fixed"
  });
  
</script>

<script src="https://unpkg.com/splitting/dist/splitting.min.js"></script>
<script>Splitting();</script>

<script src="/assets/js/app.js"></script>

<script src="/assets/js/swup.js"></script>
<script>
// Swup config
const swup = new Swup({
  plugins: [
  new SwupBodyClassPlugin(),
  new SwupProgressPlugin()
  ]
});

function loadingScripts() {
  if (document.querySelector('.gsap')) {
    Splitting(),
    gsapAnimation()
  }
}

document.addEventListener("swup:animationInStart", () => {
  loadingScripts(), locoScroll.scrollTo( 'top');
}), 
document.addEventListener("swup:animationInDone", () => {

}), console.clear();

</script>


<script>
   const setTheme = () => {
     const currentTheme = localStorage.getItem('theme');
     if (!currentTheme) {
       localStorage.setItem('theme', 'light');
       document.documentElement.dataset.theme = 'light';
       return;
     }
     document.documentElement.dataset.theme = currentTheme;
   }
   setTheme();

   const themeToggleBtn = document.querySelector('.js-toggle-theme');
   themeToggleBtn.addEventListener('click', () => {  
     const { theme } = document.documentElement.dataset;
     const themeTo = theme === 'light' ? 'dark' : 'light';
     const themeLabel = `Activate ${theme} mode`;
     document.documentElement.dataset.theme = themeTo;
     localStorage.setItem('theme', themeTo);
     themeToggleBtn.setAttribute('aria-label', themeLabel);
     themeToggleBtn.setAttribute('title', themeLabel);
   });
</script>

</body>
</html>